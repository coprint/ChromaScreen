######### NOT REMOVE START ##################################
# [include plr.cfg]
# [include mainsail.cfg]
# [include timelapse.cfg]
# [include smartpad-adxl345.cfg]
# [include smartpad-cpu-temp.cfg]
# [include moonraker_obico_macros.cfg]
# [include KAMP_Settings.cfg]
# [exclude_object]
# [save_variables]
# filename: ~/printer_data/config/variables.cfg
# [gcode_arcs]
# resolution: 0.1

# [respond]
# default_type: echo
# default_prefix: echo:
# [display_status]
# [pause_resume]                                                                                                                                                                                                                                                                                        
#Credit:
# https://github.com/dz0ny/klipper-prusa-mk3s Merci pour les contributeur
#Adaptation Wanhao Klipper PAD @Maxime3d77

#firmware
#cd Klipper
#make menuconfig
#Micro-controller Atmega AVR
#Processor model atmega2560
#make clean
#make
#Get ID:
#/dev/serial/by-id*
#Flash:
#make flash FLASH_DEVICE=/dev/serial/by-id/usb-Prusa_Research__prusa3d.com__Original_Prusa----VOTRE-ID

######################################################
################   Prusa MK3S+ - USB   ###############
######################################################
[mcu]
#serial: /dev/serial0 #Pour mode Serial
serial: /dev/ttyACM0 #Pour Mode USB
restart_method: command

######################################################
###############       Stockage PI       ##############
######################################################
[virtual_sdcard]
path: ~/printer_data/gcodes

######################################################
###############       Retractation      ##############
######################################################
# [firmware_retraction]
# retract_length: 0.8
# retract_speed: 45
# unretract_extra_length: 0
# unretract_speed: 30


######################################################
#####################   Moteurs   ####################
######################################################
[stepper_x]
step_pin: PC0
dir_pin: !PL0
enable_pin: !PA7
microsteps: 16
rotation_distance: 32
endstop_pin: tmc2130_stepper_x:virtual_endstop
position_endstop: 0
position_max: 255
homing_speed: 50
homing_retract_dist: 0

[stepper_y]
step_pin: PC1
dir_pin: PL1
enable_pin: !PA6
microsteps: 16
rotation_distance: 32
endstop_pin: tmc2130_stepper_y:virtual_endstop
position_endstop: -4
position_max: 212.5
position_min: -4
homing_speed: 50
homing_retract_dist: 0

[stepper_z]
step_pin: PC2
dir_pin: !PL2
enable_pin: !PA5
microsteps: 16
rotation_distance: 8
endstop_pin: probe:z_virtual_endstop
position_max: 210
position_min: -5
homing_speed: 13.333

[tmc2130 stepper_x]
cs_pin: PG0
interpolate: True
stealthchop_threshold: 0
run_current: .281738
hold_current: .281738
sense_resistor: 0.220
diag1_pin: !PK2
driver_IHOLDDELAY: 8
driver_TPOWERDOWN: 0
driver_TBL: 2
driver_TOFF: 3
driver_HEND: 1
driver_HSTRT: 5
driver_PWM_FREQ: 2
driver_PWM_GRAD: 2
driver_PWM_AMPL: 230
driver_PWM_AUTOSCALE: True
driver_SGT: 3
interpolate: True
stealthchop_threshold: 80

[tmc2130 stepper_y]
cs_pin: PG2
interpolate: True
stealthchop_threshold: 0
run_current: .281738
hold_current: .281738
sense_resistor: 0.220
diag1_pin: !PK7
driver_IHOLDDELAY: 8
driver_TPOWERDOWN: 0
driver_TBL: 2
driver_TOFF: 3
driver_HEND: 1
driver_HSTRT: 5
driver_PWM_FREQ: 2
driver_PWM_GRAD: 2
driver_PWM_AMPL: 230
driver_PWM_AUTOSCALE: True
driver_SGT: 3
interpolate: True
stealthchop_threshold: 80

[tmc2130 stepper_z]
cs_pin: PK5
run_current: .53033
hold_current: .53033
sense_resistor: 0.220
diag1_pin: !PK6
interpolate: True
driver_IHOLDDELAY: 8
driver_TPOWERDOWN: 0
driver_TBL: 2
driver_TOFF: 3
driver_HEND: 1
driver_HSTRT: 5
driver_PWM_FREQ: 2
driver_PWM_GRAD: 4
driver_PWM_AMPL: 200
driver_PWM_AUTOSCALE: True
driver_SGT: 4
interpolate: True
stealthchop_threshold: 80

# [tmc2130 extruder]
# cs_pin: PK4
# interpolate: True
# run_current: .513757
# hold_current: .513757
# sense_resistor: 0.220
# diag1_pin: !PK3
# driver_IHOLDDELAY: 8
# driver_TPOWERDOWN: 0
# driver_TBL: 2
# driver_TOFF: 3
# driver_HEND: 1
# driver_HSTRT: 5
# driver_PWM_FREQ: 2
# driver_PWM_GRAD: 4
# driver_PWM_AMPL: 240
# driver_PWM_AUTOSCALE: True
# driver_SGT: 3
# driver_START_SIN: 0 
# driver_START_SIN90: 247
# driver_MSLUT0: 2863314262 
# driver_MSLUT1: 1251300522 
# driver_MSLUT2: 608774441 
# driver_MSLUT3: 269500962 
# driver_MSLUT4: 4160749568 
# driver_MSLUT5: 3048961917 
# driver_MSLUT6: 1227445590 
# driver_MSLUT7: 4211234 
# driver_X1:   2
# driver_X2: 154
# driver_X3: 255
# driver_W0:   1
# driver_W1:   2
# driver_W2:   1
# driver_W3:   1

######################################################
###################   Extrudeur   ####################
######################################################
# [extruder]
# step_pin: PC3
# dir_pin: PL6
# enable_pin: !PA4
# microsteps: 16
# full_steps_per_rotation: 200
# rotation_distance: 22.85696
# nozzle_diameter: 0.400
# filament_diameter: 1.750
# heater_pin: PE5
# sensor_type: ATC Semitec 104GT-2
# sensor_pin: PF0
# min_temp: 0
# max_temp: 305
# min_extrude_temp: 185
# max_extrude_cross_section: 50.0
# max_extrude_only_distance: 500.0
# max_extrude_only_velocity: 120.0
# max_extrude_only_accel: 1250.0
# pressure_advance: 0.05
# pressure_advance_smooth_time: 0.040

######################################################
###################      Bed      ####################
######################################################
[heater_bed]
heater_pin: PG5
sensor_type: EPCOS 100K B57560G104F
sensor_pin: PF2
#control: pid
#pid_Kp: 52.924
#pid_Ki: 0.661
#pid_Kd: 1059.794
min_temp: 0
max_temp: 125

######################################################
###################     Fan       ####################
######################################################
# [heater_fan nozzle_cooling_fan]
# pin: PH5
# heater: extruder
# heater_temp: 50.0
# fan_speed: 1.0

# [fan]
# pin: PH3



######################################################
###################    Printer    ####################
######################################################
[printer]
kinematics: cartesian
max_velocity: 200
max_accel: 3600
max_z_velocity: 12
max_z_accel: 300



######################################################
###################    Sensor     ####################
######################################################
# [temperature_sensor einsy_board]
# sensor_pin: PF6
# sensor_type: TDK NTCG104LH104JT1
# min_temp: -10
# max_temp: 100

# [temperature_sensor raspberry_pi]
# sensor_type: temperature_host
# min_temp: 10
# max_temp: 101

# [filament_switch_sensor filament_sensor]
# pause_on_runout: True
# runout_gcode:
#     M118 Filament Runout Detected
#     PAUSE
# insert_gcode:
#     M118 Filament Load Detected
#     LOAD_FILAMENT
# event_delay: 3.0
# pause_delay: 0.01
# switch_pin: !PK0

######################################################
###################     Mesh      ####################
######################################################
# [bed_mesh]
# algorithm: bicubic
# fade_end: 10
# faulty_region_1_min: 100.583, 187.376
# faulty_region_1_max: 122.083, 229.376
# faulty_region_2_min: 125.672, -18.124
# faulty_region_2_max: 147.172, 23.876
# faulty_region_3_min: 192.261, 5.126
# faulty_region_3_max: 234.261, 26.626
# faulty_region_4_min: 114.422, 39.876
# faulty_region_4_max: 135.922, 81.876
# faulty_region_5_min: 21.422, 87.126
# faulty_region_5_max: 42.922, 129.126
# faulty_region_6_min: 54.172, 97.376
# faulty_region_6_max: 96.172, 118.876
# faulty_region_7_min: 154.172, 97.376
# faulty_region_7_max: 196.172, 118.876
# faulty_region_8_min: 205.136, 87.126
# faulty_region_8_max: 226.636, 129.126
# faulty_region_9_min: 114.422, 134.376
# faulty_region_9_max: 135.922, 176.376
# faulty_region_10_min: 176.177, 191.394
# faulty_region_10_max: 218.177, 212.894
# horizontal_move_z: 5 #2
# mesh_max: 228,210
# mesh_min: 24, 6
# mesh_pps: 3
# probe_count: 4,4
# speed: 200


######################################################
###################      Home     ####################
######################################################
# [safe_z_home]
# home_xy_position: 153,132
# speed: 50.0
# z_hop: 15
# z_hop_speed: 15.0
# move_to_previous: False



######################################################
#######################   Other  #####################
######################################################
# [probe]
# pin: PB4
# x_offset: 23
# y_offset: 5
# speed: 20.0
# samples: 3 # Sampling, primarily for bed mesh. 3 is fine for normal PINDA probes.
# samples_result: average
# sample_retract_dist: 1.0

# [gcode_arcs]
# resolution: 0.25

# [bed_screws]
# screw1: 13,6
# screw1_name: Front Left
# screw2: 13,115
# screw2_name: Front Center
# screw3: 13,210
# screw3_name: Front Right

# screw4: 123,6
# screw4_name: Center Left
# screw5: 123,210
# screw5_name: Center Right

# screw6: 228,6
# screw6_name: Back Left
# screw7: 228,115
# screw7_name: Back Center
# screw8: 228,210
# screw8_name: Back Right

# [gcode_arcs]
# resolution: 0.25

# [static_digital_output debug_led]
# pins: !PB7

# [output_pin BEEPER_pin]
# pin: PH2
# pwm: True
# value: 0
# shutdown_value:0
# cycle_time: 0.001
# scale: 1000

# [respond]
# default_type: command

# [skew_correction]

# [force_move]
# enable_force_move: True

# [probe]
# #z_offset = -1.673



######################################################
#######################   LCD  #######################
######################################################
# [output_pin LCD_backlight_pin]
# pin: PE3
# pwm: True
# hardware_pwm: True

# value: 0.01       # 1% of backlight
# shutdown_value: 1 # Back to full backlight (without PWM) on restart
# cycle_time: 0.001 # Default 0.1s cycle time flickers as hell

# [display]
# lcd_type: hd44780
# rs_pin: PD5
# e_pin: PF7
# d4_pin: PF5
# d5_pin: PG4
# d6_pin: PH7
# d7_pin: PG3
# encoder_pins: ^PJ1,^PJ2
# click_pin: ^!PH6

########################################
# EXP1 / EXP2 (display) pins
########################################

# [board_pins]
# aliases:
#     # EXP1 header
#     EXP1_1=PC5,  EXP1_3=PD13, EXP1_5=PE14, EXP1_7=PD11, EXP1_9=<GND>,
#     EXP1_2=PE13, EXP1_4=PC6,  EXP1_6=PE15, EXP1_8=PD10, EXP1_10=<5V>,
#     # EXP2 header
#     EXP2_1=PA6, EXP2_3=PE8, EXP2_5=PE11, EXP2_7=PE12,  EXP2_9=<GND>,
#     EXP2_2=PA5, EXP2_4=PE10, EXP2_6=PA7, EXP2_8=<RST>, EXP2_10=<3.3v>
#     # Pins EXP2_1, EXP2_6, EXP2_2 are also MISO, MOSI, SCK of bus "ssp1"




#####################################################################
#MACRO
#####################################################################


# [gcode_macro PRINT_START]  
# gcode:
#     RESPOND MSG="Lancement Impression"
#     save_last_file
#     SAVE_VARIABLE VARIABLE=was_interrupted VALUE=True
#         {% set BED_TEMP = params.BED_TEMP|default(0)|float %}
#     {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(0)|float %}
#     ;Put printing message on LCD screen
#     M117 Heating... 
#     # Start bed heating
#     M140 S{BED_TEMP}
#     # Use absolute coordinates
#     G90
#     # Reset the G-Code Z offset (adjust Z offset if needed)
#     SET_GCODE_OFFSET Z=0.0
#     # Home the printer
#     G28
#     # Run Bed leveling
#     BED_MESH_CALIBRATE
#     # Wait for bed to reach temperature
#     M190 S{BED_TEMP}
#     G1 Z5.0 F3000 ; Move Z Axis up little to prevent scratching of Heat Bed
#     G1 X0.1 Y20 Z0.3 F5000.0 ; Move to start position
#     # Set and wait for nozzle to reach temperature
#     M109 S{EXTRUDER_TEMP}
#     # Run Cura start Gcode to clean nozzle
#     G92 E0 ; reset extruder
#     G1 Z1.0 F3000 ; move z up little to prevent scratching of surface
#     G1 X2 Y20 Z0.3 F5000.0 ; move to start-line position
#     G1 X2 Y200.0 Z0.3 F1500.0 E15 ; draw 1st line
#     G1 X2 Y200.0 Z0.4 F5000.0 ; move to side a little
#     G1 X2 Y20 Z0.4 F1500.0 E30 ; draw 2nd line
#     G92 E0 ; reset extruder
#     G1 Z1.0 F3000 ; move z up little to prevent scratching of surface       

# [gcode_macro PRINT_END]
# gcode:    
#   SAVE_VARIABLE VARIABLE=was_interrupted VALUE=False
#   clear_last_file
#   RUN_SHELL_COMMAND CMD=clear_plr
#   G1 X0 Y0
#   M104 S0 ; Turn off extruder
#   M140 S0 ; Turn off heated bed
#   M106 S0 ; Turn off extruder fan
#   M107 ; Turn off chamber fan
#   M84 ; Disable motors


# [gcode_macro PAUSE]
# description: Pause the actual running print
# rename_existing: PAUSE_BASE
# # change this if you need more or less extrusion
# variable_extrude: 1.0
# gcode:
#   ##### read E from pause macro #####
#   {% set E = printer["gcode_macro PAUSE"].extrude|float %}
#   ##### set park positon for x and y #####
#   # default is your max posion from your printer.cfg
#   {% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
#   {% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
#   ##### calculate save lift position #####
#   {% set max_z = printer.toolhead.axis_maximum.z|float %}
#   {% set act_z = printer.toolhead.position.z|float %}
#   {% if act_z < (max_z - 2.0) %}
#       {% set z_safe = 2.0 %}
#   {% else %}
#       {% set z_safe = max_z - act_z %}
#   {% endif %}
#   ##### end of definitions #####
#   PAUSE_BASE
#   G91
#   {% if printer.extruder.can_extrude|lower == 'true' %}
#     G1 E-{E} F2100
#   {% else %}
#     {action_respond_info("Extruder not hot enough")}
#   {% endif %}
#   {% if "xyz" in printer.toolhead.homed_axes %}
#     G1 Z{z_safe} F900
#     G90
#     G1 X{x_park} Y{y_park} F6000
#   {% else %}
#     {action_respond_info("Printer not homed")}
#   {% endif %} 

# [gcode_macro M600]
# description: Color change
# gcode:
#     {% set X = params.X|default(0)|float %}
#     {% set Y = params.Y|default(0)|float %}
#     {% set Z = params.Z|default(10)|float %}
#     SAVE_GCODE_STATE NAME=M600_state
#     PAUSE
#     G91
#     G1 E-.8 F2700
#     G1 Z{Z}
#     G90
#     G1 X{X} Y{Y} F3000
#     G91
#     G1 E-50 F1000
#     RESTORE_GCODE_STATE NAME=M600_state

# [gcode_macro M601]
# description: Pause
# gcode: PAUSE

# [gcode_macro RESUME]
# description: Resume the actual running print
# rename_existing: RESUME_BASE
# gcode:
#   ##### read E from pause macro #####
#   {% set E = printer["gcode_macro PAUSE"].extrude|float %}
#   #### get VELOCITY parameter if specified ####
#   {% if 'VELOCITY' in params|upper %}
#     {% set get_params = ('VELOCITY=' + params.VELOCITY)  %}
#   {%else %}
#     {% set get_params = "" %}
#   {% endif %}
#   ##### end of definitions #####
#   {% if printer.extruder.can_extrude|lower == 'true' %}
#     G91
#     G1 E{E} F2100
#   {% else %}
#     {action_respond_info("Extruder not hot enough")}
#   {% endif %}  
#   RESUME_BASE {get_params}

# [gcode_macro CANCEL_PRINT]
# description: Cancel the actual running print
# rename_existing: CANCEL_PRINT_BASE
# gcode:
#   SAVE_VARIABLE VARIABLE=was_interrupted VALUE=False
#   RUN_SHELL_COMMAND CMD=clear_plr
#   clear_last_file
#   PRINT_END
#   SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout} 
#   #SDCARD_RESET_FILE
#   M400              ; wait for buffer to clear
#   G92 E0            ; zero the extruder
#   G1 E-10.0 F1200 	; retract filament
#   M106 S0
#   TURN_OFF_HEATERS
#   CANCEL_PRINT_BASE
#   G91 
#   M107 	            ; turn off fan
#   G1 Z2 F3000 
#   G90
#   G0 X0 Y255 F6000
#   M84

# [gcode_macro G29]
# gcode:
#       BED_MESH_CLEAR
#       G28
#       BED_MESH_CALIBRATE
#       G0 X117 Y126 Z5 F3000
#       G0 Z0 F300

# [gcode_macro PID_EXTRUDER]
# gcode:
#   G28
#   M106 S255
#   PID_CALIBRATE HEATER=extruder TARGET=190
#   SAVE_CONFIG

# [gcode_macro PID_BED]
# gcode:
#   G28
#   M106 S255
#   PID_CALIBRATE HEATER=heater_bed TARGET=60
#   SAVE_CONFIG

# [gcode_macro M109]
# rename_existing: M99109
# gcode:
#     #Parameters
#     {% set s = params.S|float %}
#     M104 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}  
#     {% if s != 0 %}
#         TEMPERATURE_WAIT SENSOR=extruder MINIMUM={s} MAXIMUM={s+1}   
#     {% endif %}

# [gcode_macro M84]
# rename_existing:M84.1
# gcode:
#       SET_STEPPER_ENABLE STEPPER=stepper_x enable=0
#       SET_STEPPER_ENABLE STEPPER=stepper_y enable=0
#       SET_STEPPER_ENABLE STEPPER=stepper_z enable=0
#       SET_STEPPER_ENABLE STEPPER=extruder  enable=0
#       SET_KINEMATIC_POSITION

# [gcode_macro M205]
# description: Sets square corner velocity.
#   Usage: M205 [X<velocity>] [Y<velocity>]
# gcode:
#   {% if 'X' in params or 'Y' in params %}
#     SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY="{
#       (params.X|default(0)|float, params.Y|default(0)|float)|min}"
#   {% else %}
#     SET_VELOCITY_LIMIT
#   {% endif %}

# [gcode_macro M204]
# description: Sets maximum accelleration.
#   Usage: M204 [S<accel>] [P<accel> T<accel>]
# rename_existing: M204.1
# gcode:
#   {% set f = params.F|default(0.5)|float %}
#   {% if 'S' in params %}
#   {% set s = params.S|float %}
#   SET_VELOCITY_LIMIT ACCEL={s} ACCEL_TO_DECEL={ s * f }
#   {% else %}
#   {% if 'P' in params %}
#   {% set p = params.P|float %}
#   {% if 'T' in params %}
#   {% set t = params.T|float %}
#   {% if p < t %}
#   SET_VELOCITY_LIMIT ACCEL={p} ACCEL_TO_DECEL={ p * f }
#   {% else %}
#   SET_VELOCITY_LIMIT ACCEL={t} ACCEL_TO_DECEL={ t * f }
#   {% endif %}
#   {% else %}
#   SET_VELOCITY_LIMIT ACCEL={p} ACCEL_TO_DECEL={ p * f }
#   {% endif %}
#   {% elif 'T' in params %}
#   {% set t = params.T|float %}
#   SET_VELOCITY_LIMIT ACCEL={t} ACCEL_TO_DECEL={ t * f }
#   {% endif %}
#   {% endif %}


# [gcode_macro M201]
# description: Sets maximum accelleration.
#   Usage: M201 [X<accel>] [Y<accel>]
# gcode:
#   {% if 'X' in params or 'Y' in params %}
#   {% set accel = (params.X|default(params.Y)|float, params.Y|default(params.X)|float)|min %}
#   SET_VELOCITY_LIMIT ACCEL={accel} ACCEL_TO_DECEL={accel * 0.5}
#   {% else %}
#   SET_VELOCITY_LIMIT
#   {% endif %}
  
# [gcode_macro M203]
# description: Sets maximum velocity.
#   Usage: M203 [X<velocity>] [Y<velocity>]
# gcode:
#   {% if 'X' in params or 'Y' in params %}
#     {% set velocity = (params.X|default(params.Y)|float,
#                        params.Y|default(params.X)|float)|min %}
#     SET_VELOCITY_LIMIT VELOCITY="{velocity}"
#   {% else %}
#     SET_VELOCITY_LIMIT
#   {% endif %}
  
# [gcode_macro M191]
# gcode:
#       {% set s = params.S|float %}
#       {% if params.S is defined %}
#         SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={params.S|int}
#         TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={s-4} MAXIMUM={s+10} 
#       {% endif %}
      
# [gcode_macro SAUVEGARDER]
# description: Sauvegarder la configuration
# gcode:
#   SAVE_CONFIG

# [gcode_macro M486]
# gcode:
#     CLEAR_PAUSE

# [gcode_macro G80]
# gcode:
#     M117 Bed leveling
#     BED_MESH_CALIBRATE
#     G1 X0 Y0 Z0.4 F4000
#     M117
#     M400

# [gcode_macro M900]
# gcode:
#   {% if 'K' in params %}
#     {% if 'E' in params %}
#       SET_PRESSURE_ADVANCE EXTRUDER={params.E} ADVANCE={params.K}
#     {% else %}
#       SET_PRESSURE_ADVANCE ADVANCE={params.K}
#     {% endif %}
#   {% endif %}
  
# [gcode_macro G81]
# gcode:
#  BED_MESH_OUTPUT
 
# [gcode_macro M300]
# gcode:
#     # Use a default 1kHz tone if S is omitted.
#     {% set S = params.S|default(1000)|int %}
#     # Use a 10ms duration is P is omitted.
#     {% set P = params.P|default(100)|int %}
#     SET_PIN PIN=BEEPER_pin VALUE=0.5 CYCLE_TIME={ 1.0/S if S > 0 else 1 }
#     G4 P{P}
#     SET_PIN PIN=BEEPER_pin VALUE=0
    
# [gcode_macro UNLOAD_FILAMENT]
# gcode:
#   SAVE_GCODE_STATE NAME=unload_state
#   G91
#   {% if params.TEMP is defined or printer.extruder.can_extrude|lower == 'false' %}
#     M117 Heating...
#     # Heat up hotend to provided temp or 220 as default as that should work OK with most filaments.
#     M109 S{params.TEMP|default(220, true)}
#   {% endif %}
#   M117 Unloading filament...
#   G92 E0.0
#   G91
#   G1 E-45 F5000
#   G1 E-15 F1000
#   G1 E-20 F1000
#   G90
#   G92 E0.0
#   M400
#   M117 Remove Filament Now!
#   M300 S300 P1000
#   M117 Filament unloaded!
#   RESTORE_GCODE_STATE NAME=unload_state

# [gcode_macro LOAD_FILAMENT]
# gcode:
#   SAVE_GCODE_STATE NAME=load_state
#   G91
#   # Heat up hotend to provided temp or 220 as default as that should work OK with most filaments.
#   {% if params.TEMP is defined or printer.extruder.can_extrude|lower == 'false' %}
#   M117 Heating...
#   M109 S{params.TEMP|default(220, true)}
#   {% endif %}
#   M117 Loading filament...
#   # Load the filament into the hotend area.
#   G92 E0.0
#   G91
#   G1 E70 F400
#   G1 E40 F100
#   G90
#   G92 E0.0
#   M400
#   M117 Filament loaded!
#   RESTORE_GCODE_STATE NAME=load_state

# [delayed_gcode clear_display]
# initial_duration: 0.
# gcode:
#   M117

# [gcode_macro _KAMP_Settings]
# description: This macro contains all adjustable settings for KAMP 

# # The following variables are settings for KAMP as a whole.
# variable_verbose_enable: True               # Set to True to enable KAMP information output when running. This is useful for debugging.

# # The following variables are for adjusting adaptive mesh settings for KAMP.
# variable_mesh_margin: 0                     # Expands the mesh size in millimeters if desired. Leave at 0 to disable.
# variable_fuzz_amount: 0                     # Slightly randomizes mesh points to spread out wear from nozzle-based probes. Leave at 0 to disable.

# # The following variables are for those with a dockable probe like Klicky, Euclid, etc.                 # ----------------  Attach Macro | Detach Macro
# variable_probe_dock_enable: False           # Set to True to enable the usage of a dockable probe.      # ---------------------------------------------
# variable_attach_macro: 'Attach_Probe'       # The macro that is used to attach the probe.               # Klicky Probe:   'Attach_Probe' | 'Dock_Probe'
# variable_detach_macro: 'Dock_Probe'         # The macro that is used to store the probe.                # Euclid Probe:   'Deploy_Probe' | 'Stow_Probe'
#                                                                                                         # Legacy Gcode:   'M401'         | 'M402'

# # The following variables are for adjusting adaptive purge settings for KAMP.
# variable_purge_height: 0.8                  # Z position of nozzle during purge, default is 0.8.
# variable_tip_distance: 0                    # Distance between tip of filament and nozzle before purge. Should be similar to PRINT_END final retract amount.
# variable_purge_margin: 10                   # Distance the purge will be in front of the print area, default is 10.
# variable_purge_amount: 30                   # Amount of filament to be purged prior to printing.
# variable_flow_rate: 12                      # Flow rate of purge in mm3/s. Default is 12.

# # The following variables are for adjusting the Smart Park feature for KAMP, which will park the printhead near the print area at a specified height.
# variable_smart_park_height: 10              # Z position for Smart Park, default is 10.

# gcode: # Gcode section left intentionally blank. Do not disturb.

#     {action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}

# [gcode_macro BED_MESH_CALIBRATE]
# rename_existing: _BED_MESH_CALIBRATE
# gcode:

#     {% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}                                # Gather all object points
#     {% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}                                                          # Get bed mesh min from printer.cfg
#     {% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}                                                          # Get bed mesh max from printer.cfg
#     {% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}                                                        # Get probe count from printer.cfg
#     {% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}                                                                 # Pull variables from _KAMP_Settings
#     {% set verbose_enable = kamp_settings.verbose_enable | abs %}                                                                   # Pull verbose setting from _KAMP_Settings
#     {% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}                                                             # Pull probe dockable probe settings from _KAMP_Settings
#     {% set attach_macro = kamp_settings.attach_macro | string %}                                                                    # Pull attach probe command from _KAMP_Settings
#     {% set detach_macro = kamp_settings.detach_macro | string %}                                                                    # Pull detach probe command from _KAMP_Settings
#     {% set mesh_margin = kamp_settings.mesh_margin | float %}                                                                       # Pull mesh margin setting from _KAMP_Settings
#     {% set fuzz_amount = kamp_settings.fuzz_amount | float %}                                                                       # Pull fuzz amount setting from _KAMP_Settings
#     {% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}                                             # If probe count is only a single number, convert it to 2. E.g. probe_count:7 = 7,7
#     {% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}                            # Determine max probe point distance
#     {% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}                            # Determine max probe point distance
#     {% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}                                                # Set x_min from smallest object x point
#     {% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}                                                # Set y_min from smallest object y point
#     {% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}                                                # Set x_max from largest object x point
#     {% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}                                                # Set y_max from largest object y point

#     {% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}                                                          # Set fuzz_range between 0 and fuzz_amount
#     {% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}                                                   # Adapt x_min to margin and fuzz constraints
#     {% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}                                                   # Adapt y_min to margin and fuzz constraints
#     {% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}                                                   # Adapt x_max to margin and fuzz constraints
#     {% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}                                                   # Adapt y_max to margin and fuzz constraints

#     {% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}                                                               # Compare adjustments to defaults and choose max
#     {% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}                                                               # Compare adjustments to defaults and choose max
#     {% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}                                                               # Compare adjustments to defaults and choose min
#     {% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}                                                               # Compare adjustments to defaults and choose min

#     {% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method='ceil') | int) + 1 %}          # Define probe_count's x point count and round up
#     {% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method='ceil') | int) + 1 %}          # Define probe_count's y point count and round up

#     {% if (([points_x, points_y]|max) > 6) %}                                                                                       # 
#         {% set algorithm = "bicubic" %}                                                                                             # 
#         {% set min_points = 4 %}                                                                                                    # 
#     {% else %}                                                                                                                      # Calculate if algorithm should be bicubic or lagrange
#         {% set algorithm = "lagrange" %}                                                                                            # 
#         {% set min_points = 3 %}                                                                                                    # 
#     {% endif %}                                                                                                                     # 

#     {% set points_x = [points_x , min_points]|max %}                                                                                # Set probe_count's x points to fit the calculated algorithm
#     {% set points_y = [points_y , min_points]|max %}                                                                                # Set probe_count's y points to fit the calculated algorithm
#     {% set points_x = [points_x , probe_count[0]]|min %}
#     {% set points_y = [points_y , probe_count[1]]|min %}

#     {% if verbose_enable == True %}                                                                                                 # If verbose is enabled, print information about KAMP's calculations
#         {% if printer.exclude_object.objects != [] %}

#             { action_respond_info( "Algorithm: {}.".format(                                                                              
#                 (algorithm),                                                                                                            
#             )) }

#             { action_respond_info("Default probe count: {},{}.".format(                                                                  
#                 (probe_count[0]),                                                                                                       
#                 (probe_count[1]),                                                                                                       
#             )) }

#             { action_respond_info("Adapted probe count: {},{}.".format(                                                                  
#                 (points_x),                                                                                                             
#                 (points_y),                                                                                                             
#             )) }                                                                                                              

#             {action_respond_info("Default mesh bounds: {}, {}.".format(                                                                  
#                 (bed_mesh_min[0],bed_mesh_min[1]),                                                                                      
#                 (bed_mesh_max[0],bed_mesh_max[1]),                                                                                      
#             )) }

#             {% if mesh_margin > 0 %}                                                                                                    
#                 {action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(                                       
#                     (mesh_margin),                                                                                                      
#                     (mesh_margin),                                                                                       
#                 )) }                                                                                                                    
#             {% else %}                                                                                                                  
#                 {action_respond_info("Mesh margin is 0, margin not increased.")}                                                        
#             {% endif %}                                                                                                                 

#             {% if fuzz_amount > 0 %}                                                                                                    
#                 {action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(                                     
#                     (fuzz_amount),                                                                                                      
#                 )) }                                                                                                                    
#             {% else %}                                                                                                                  
#                 {action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}                                                      
#             {% endif %}                                                                                                                 

#             { action_respond_info("Adapted mesh bounds: {}, {}.".format(                                                                 
#                 (adapted_x_min, adapted_y_min),                                                                                         
#                 (adapted_x_max, adapted_y_max),                                                                                         
#             )) }

#             {action_respond_info("KAMP adjustments successful. Happy KAMPing!")}

#         {% else %}

#             {action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}
#             G4 P5000                                                                                                                # Wait 5 seconds to make error more visible
#         {% endif %}

#     {% endif %}

#     {% if probe_dock_enable == True %}
#         {attach_macro}                                                                                                              # Attach/deploy a probe if the probe is stored somewhere outside of the print area
#     {% endif %}

#     _BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}

#     {% if probe_dock_enable == True %}
#         {detach_macro}                                                                                                              # Detach/stow a probe if the probe is stored somewhere outside of the print area
#     {% endif %}            
